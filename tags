!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
Args	parser.cc	/^  std::vector<std::string> Args;$/;"	m	class:__anon1::PrototypeAST	file:
Args	parser.cc	/^  std::vector<std::unique_ptr<ExprAST>> Args;$/;"	m	class:__anon1::CallExprAST	file:
BinaryExprAST	parser.cc	/^  BinaryExprAST(char Op, std::unique_ptr<ExprAST> LHS,$/;"	f	class:__anon1::BinaryExprAST
BinaryExprAST	parser.cc	/^class BinaryExprAST : public ExprAST {$/;"	c	namespace:__anon1	file:
BinopPrecedence	parser.cc	/^static std::map<char, int> BinopPrecedence;$/;"	v	file:
Body	parser.cc	/^  std::unique_ptr<ExprAST> Body;$/;"	m	class:__anon1::FunctionAST	file:
CallExprAST	parser.cc	/^  CallExprAST(const std::string &Callee,$/;"	f	class:__anon1::CallExprAST
CallExprAST	parser.cc	/^class CallExprAST : public ExprAST {$/;"	c	namespace:__anon1	file:
Callee	parser.cc	/^  std::string Callee;$/;"	m	class:__anon1::CallExprAST	file:
CurTok	parser.cc	/^static int CurTok;$/;"	v	file:
ExprAST	parser.cc	/^class ExprAST {$/;"	c	namespace:__anon1	file:
FunctionAST	parser.cc	/^  FunctionAST(std::unique_ptr<PrototypeAST> Proto,$/;"	f	class:__anon1::FunctionAST
FunctionAST	parser.cc	/^class FunctionAST {$/;"	c	namespace:__anon1	file:
GetTokPrecedence	parser.cc	/^static int GetTokPrecedence() {$/;"	f	file:
HandleDefinition	parser.cc	/^static void HandleDefinition() {$/;"	f	file:
HandleExtern	parser.cc	/^static void HandleExtern() {$/;"	f	file:
HandleTopLevelExpression	parser.cc	/^static void HandleTopLevelExpression() {$/;"	f	file:
IdentifierStr	parser.cc	/^static std::string IdentifierStr; \/\/ Filled in if tok_identifier$/;"	v	file:
LHS	parser.cc	/^  std::unique_ptr<ExprAST> LHS, RHS;$/;"	m	class:__anon1::BinaryExprAST	file:
LogError	parser.cc	/^std::unique_ptr<ExprAST> LogError(const char *Str) {$/;"	f
LogErrorP	parser.cc	/^std::unique_ptr<PrototypeAST> LogErrorP(const char *Str) {$/;"	f
MainLoop	parser.cc	/^static void MainLoop() {$/;"	f	file:
Name	parser.cc	/^  std::string Name;$/;"	m	class:__anon1::PrototypeAST	file:
Name	parser.cc	/^  std::string Name;$/;"	m	class:__anon1::VariableExprAST	file:
NumVal	parser.cc	/^static double NumVal;             \/\/ Filled in if tok_number$/;"	v	file:
NumberExprAST	parser.cc	/^  NumberExprAST(double Val) : Val(Val) {}$/;"	f	class:__anon1::NumberExprAST
NumberExprAST	parser.cc	/^class NumberExprAST : public ExprAST {$/;"	c	namespace:__anon1	file:
Op	parser.cc	/^  char Op;$/;"	m	class:__anon1::BinaryExprAST	file:
ParseBinOpRHS	parser.cc	/^static std::unique_ptr<ExprAST> ParseBinOpRHS(int ExprPrec,$/;"	f	file:
ParseDefinition	parser.cc	/^static std::unique_ptr<FunctionAST> ParseDefinition() {$/;"	f	file:
ParseExpression	parser.cc	/^static std::unique_ptr<ExprAST> ParseExpression() {$/;"	f	file:
ParseExtern	parser.cc	/^static std::unique_ptr<PrototypeAST> ParseExtern() {$/;"	f	file:
ParseIdentifierExpr	parser.cc	/^static std::unique_ptr<ExprAST> ParseIdentifierExpr() {$/;"	f	file:
ParseNumberExpr	parser.cc	/^static std::unique_ptr<ExprAST> ParseNumberExpr() {$/;"	f	file:
ParseParenExpr	parser.cc	/^static std::unique_ptr<ExprAST> ParseParenExpr() {$/;"	f	file:
ParsePrimary	parser.cc	/^static std::unique_ptr<ExprAST> ParsePrimary() {$/;"	f	file:
ParsePrototype	parser.cc	/^static std::unique_ptr<PrototypeAST> ParsePrototype() {$/;"	f	file:
ParseTopLevelExpr	parser.cc	/^static std::unique_ptr<FunctionAST> ParseTopLevelExpr() {$/;"	f	file:
Proto	parser.cc	/^  std::unique_ptr<PrototypeAST> Proto;$/;"	m	class:__anon1::FunctionAST	file:
PrototypeAST	parser.cc	/^  PrototypeAST(const std::string &Name, std::vector<std::string> Args)$/;"	f	class:__anon1::PrototypeAST
PrototypeAST	parser.cc	/^class PrototypeAST {$/;"	c	namespace:__anon1	file:
RHS	parser.cc	/^  std::unique_ptr<ExprAST> LHS, RHS;$/;"	m	class:__anon1::BinaryExprAST	file:
Token	parser.cc	/^enum Token {$/;"	g	file:
Val	parser.cc	/^  double Val;$/;"	m	class:__anon1::NumberExprAST	file:
VariableExprAST	parser.cc	/^  VariableExprAST(const std::string &Name) : Name(Name) {}$/;"	f	class:__anon1::VariableExprAST
VariableExprAST	parser.cc	/^class VariableExprAST : public ExprAST {$/;"	c	namespace:__anon1	file:
getName	parser.cc	/^  const std::string &getName() const { return Name; }$/;"	f	class:__anon1::PrototypeAST
getNextToken	parser.cc	/^static int getNextToken() { return CurTok = gettok(); }$/;"	f	file:
gettok	parser.cc	/^static int gettok() {$/;"	f	file:
main	parser.cc	/^int main() {$/;"	f
tok_def	parser.cc	/^  tok_def = -2,$/;"	e	enum:Token	file:
tok_eof	parser.cc	/^  tok_eof = -1,$/;"	e	enum:Token	file:
tok_extern	parser.cc	/^  tok_extern = -3,$/;"	e	enum:Token	file:
tok_identifier	parser.cc	/^  tok_identifier = -4,$/;"	e	enum:Token	file:
tok_number	parser.cc	/^  tok_number = -5$/;"	e	enum:Token	file:
